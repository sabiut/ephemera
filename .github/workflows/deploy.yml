name: Deploy Ephemera to GKE

on:
  push:
    branches:
      - main
    paths:
      - 'api/**'
      - 'Dockerfile'
      - 'docker-compose.yml'
      - '.github/workflows/deploy.yml'
      - 'infrastructure/k8s/ephemera/**'

  workflow_dispatch:  # Allow manual trigger

env:
  GCP_PROJECT_ID: ephemera-dev-2025
  GKE_CLUSTER: ephemera-dev
  GKE_REGION: us-central1
  ARTIFACT_REGISTRY: us-central1-docker.pkg.dev/ephemera-dev-2025/ephemera

jobs:
  build-and-deploy:
    name: Build and Deploy to GKE
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v1
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}

    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v1
      with:
        install_components: 'gke-gcloud-auth-plugin'

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_wrapper: false

    - name: Configure Docker for Artifact Registry
      run: |
        gcloud auth configure-docker us-central1-docker.pkg.dev

    - name: Get GKE credentials
      run: |
        gcloud container clusters get-credentials ${{ env.GKE_CLUSTER }} \
          --region ${{ env.GKE_REGION }} \
          --project ${{ env.GCP_PROJECT_ID }}
      env:
        USE_GKE_GCLOUD_AUTH_PLUGIN: "True"

    - name: Build and push API image
      run: |
        docker build -f api/Dockerfile -t ${{ env.ARTIFACT_REGISTRY }}/ephemera-api:${{ github.sha }} -t ${{ env.ARTIFACT_REGISTRY }}/ephemera-api:latest ./api
        docker push ${{ env.ARTIFACT_REGISTRY }}/ephemera-api:${{ github.sha }}
        docker push ${{ env.ARTIFACT_REGISTRY }}/ephemera-api:latest

    - name: Build and push Celery Worker image
      run: |
        docker build -f api/Dockerfile -t ${{ env.ARTIFACT_REGISTRY }}/ephemera-celery-worker:${{ github.sha }} -t ${{ env.ARTIFACT_REGISTRY }}/ephemera-celery-worker:latest ./api
        docker push ${{ env.ARTIFACT_REGISTRY }}/ephemera-celery-worker:${{ github.sha }}
        docker push ${{ env.ARTIFACT_REGISTRY }}/ephemera-celery-worker:latest

    - name: Build and push Celery Beat image
      run: |
        docker build -f api/Dockerfile -t ${{ env.ARTIFACT_REGISTRY }}/ephemera-celery-beat:${{ github.sha }} -t ${{ env.ARTIFACT_REGISTRY }}/ephemera-celery-beat:latest ./api
        docker push ${{ env.ARTIFACT_REGISTRY }}/ephemera-celery-beat:${{ github.sha }}
        docker push ${{ env.ARTIFACT_REGISTRY }}/ephemera-celery-beat:latest

    - name: Get infrastructure connection strings from Terraform
      run: |
        cd infrastructure/terraform/gcp

        # Initialize Terraform to read state (suppress warnings)
        terraform init -input=false > /dev/null 2>&1

        # Get Redis connection info
        REDIS_HOST=$(terraform output -raw redis_host 2>/dev/null)
        REDIS_PORT=$(terraform output -raw redis_port 2>/dev/null)
        REDIS_URL="redis://${REDIS_HOST}:${REDIS_PORT}/0"

        # Get PostgreSQL connection info
        DB_HOST=$(terraform output -raw cloudsql_private_ip 2>/dev/null)
        DB_NAME=$(terraform output -raw cloudsql_database_name 2>/dev/null)
        DB_USER=$(terraform output -raw cloudsql_username 2>/dev/null)
        DB_PASSWORD_RAW=$(gcloud secrets versions access latest --secret="ephemera-dev-db-password" --project="${{ env.GCP_PROJECT_ID }}" 2>/dev/null)

        # URL-encode the password to handle special characters
        DB_PASSWORD=$(python3 -c "import urllib.parse; print(urllib.parse.quote('${DB_PASSWORD_RAW}', safe=''))")

        DATABASE_URL="postgresql://${DB_USER}:${DB_PASSWORD}@${DB_HOST}:5432/${DB_NAME}"

        # Export to GitHub environment using multiline format to handle special characters
        {
          echo "REDIS_URL<<EOF"
          echo "${REDIS_URL}"
          echo "EOF"
          echo "DATABASE_URL<<EOF"
          echo "${DATABASE_URL}"
          echo "EOF"
        } >> $GITHUB_ENV

    - name: Install nginx-ingress controller
      run: |
        # Check if nginx-ingress is already installed
        if ! kubectl get namespace ingress-nginx &> /dev/null; then
          echo "Installing nginx-ingress controller..."
          kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/controller-v1.9.4/deploy/static/provider/cloud/deploy.yaml
          # Wait for ingress controller to be ready
          kubectl wait --namespace ingress-nginx \
            --for=condition=ready pod \
            --selector=app.kubernetes.io/component=controller \
            --timeout=300s
          echo "Waiting for LoadBalancer IP to be assigned..."
          sleep 30
        else
          echo "nginx-ingress already installed"
        fi

    - name: Install cert-manager
      run: |
        # Check if cert-manager is already installed
        if ! kubectl get namespace cert-manager &> /dev/null; then
          echo "Installing cert-manager..."
          kubectl apply -f https://github.com/cert-manager/cert-manager/releases/download/v1.13.3/cert-manager.yaml
          # Wait for cert-manager to be ready
          kubectl wait --for=condition=Available --timeout=300s deployment/cert-manager -n cert-manager
          kubectl wait --for=condition=Available --timeout=300s deployment/cert-manager-webhook -n cert-manager
          kubectl wait --for=condition=Available --timeout=300s deployment/cert-manager-cainjector -n cert-manager
        else
          echo "cert-manager already installed"
        fi

    - name: Apply Kubernetes manifests
      run: |
        kubectl apply -f infrastructure/k8s/ephemera/namespace.yaml
        kubectl apply -f infrastructure/k8s/ephemera/configmap.yaml

        # Create secret from Terraform outputs and GitHub secrets
        kubectl create secret generic ephemera-secrets -n ephemera-system \
          --from-literal=DATABASE_URL="${{ env.DATABASE_URL }}" \
          --from-literal=REDIS_URL="${{ env.REDIS_URL }}" \
          --from-literal=CELERY_BROKER_URL="${{ env.REDIS_URL }}" \
          --from-literal=CELERY_RESULT_BACKEND="${{ env.REDIS_URL }}" \
          --from-literal=GITHUB_APP_ID="${{ secrets.APP_ID }}" \
          --from-literal=GITHUB_APP_CLIENTID="${{ secrets.APP_CLIENT_ID }}" \
          --from-literal=GITHUB_WEBHOOK_SECRET="${{ secrets.WEBHOOK_SECRET }}" \
          --from-literal=GITHUB_APP_PRIVATE_KEY="${{ secrets.APP_PRIVATE_KEY }}" \
          --from-literal=SECRET_KEY="${{ secrets.SECRET_KEY }}" \
          --dry-run=client -o yaml | kubectl apply -f -

        # Apply Let's Encrypt ClusterIssuer (generate from template with email)
        export LETSENCRYPT_EMAIL="${{ secrets.LETSENCRYPT_EMAIL }}"
        envsubst < infrastructure/k8s/letsencrypt-issuer.yaml.template | kubectl apply -f -

        kubectl apply -f infrastructure/k8s/ephemera/api-deployment.yaml
        kubectl apply -f infrastructure/k8s/ephemera/celery-worker-deployment.yaml
        kubectl apply -f infrastructure/k8s/ephemera/celery-beat-deployment.yaml
        kubectl apply -f infrastructure/k8s/ephemera/api-service.yaml
        kubectl apply -f infrastructure/k8s/ephemera/api-ingress.yaml

    - name: Run database migrations (before updating images)
      run: |
        # Run migrations on the current running pods before deploying new version
        kubectl exec -n ephemera-system deployment/ephemera-api -- alembic upgrade head || echo "Migration failed or no pods running yet"

    - name: Update deployment images
      run: |
        kubectl set image deployment/ephemera-api api=${{ env.ARTIFACT_REGISTRY }}/ephemera-api:${{ github.sha }} -n ephemera-system
        kubectl set image deployment/ephemera-celery-worker celery-worker=${{ env.ARTIFACT_REGISTRY }}/ephemera-celery-worker:${{ github.sha }} -n ephemera-system
        kubectl set image deployment/ephemera-celery-beat celery-beat=${{ env.ARTIFACT_REGISTRY }}/ephemera-celery-beat:${{ github.sha }} -n ephemera-system

    - name: Wait for rollout to complete
      run: |
        kubectl rollout status deployment/ephemera-api -n ephemera-system --timeout=5m || {
          echo "Rollout failed! Checking pod status and logs..."
          kubectl get pods -n ephemera-system
          kubectl describe pods -n ephemera-system -l component=api
          echo "=== Recent logs from failing pods ==="
          kubectl logs -n ephemera-system -l component=api --tail=50 --all-containers=true || true
          exit 1
        }
        kubectl rollout status deployment/ephemera-celery-worker -n ephemera-system --timeout=5m
        kubectl rollout status deployment/ephemera-celery-beat -n ephemera-system --timeout=5m

    - name: Verify deployment
      run: |
        kubectl get pods -n ephemera-system
        kubectl get ingress -n ephemera-system
        echo "Deployment complete! API should be accessible at https://ephemera-api.devpreview.app"
# Trigger deployment
