name: Deploy Ephemera to GKE

on:
  push:
    branches:
      - main
    paths:
      - 'api/**'
      - 'Dockerfile'
      - 'docker-compose.yml'
      - '.github/workflows/deploy.yml'
      - 'infrastructure/k8s/ephemera/**'

  workflow_dispatch:  # Allow manual trigger

env:
  GCP_PROJECT_ID: ephemera-dev-2025
  GKE_CLUSTER: ephemera-dev
  GKE_REGION: us-central1
  GCR_REGISTRY: gcr.io/ephemera-dev-2025

jobs:
  build-and-deploy:
    name: Build and Deploy to GKE
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v1
      with:
        service_account_key: ${{ secrets.GCP_SA_KEY }}
        project_id: ${{ env.GCP_PROJECT_ID }}
        export_default_credentials: true

    - name: Configure Docker for GCR
      run: |
        gcloud auth configure-docker

    - name: Get GKE credentials
      run: |
        gcloud container clusters get-credentials ${{ env.GKE_CLUSTER }} \
          --region ${{ env.GKE_REGION }} \
          --project ${{ env.GCP_PROJECT_ID }}

    - name: Build and push API image
      run: |
        docker build -f api/Dockerfile -t ${{ env.GCR_REGISTRY }}/ephemera-api:${{ github.sha }} -t ${{ env.GCR_REGISTRY }}/ephemera-api:latest ./api
        docker push ${{ env.GCR_REGISTRY }}/ephemera-api:${{ github.sha }}
        docker push ${{ env.GCR_REGISTRY }}/ephemera-api:latest

    - name: Build and push Celery Worker image
      run: |
        docker build -f api/Dockerfile -t ${{ env.GCR_REGISTRY }}/ephemera-celery-worker:${{ github.sha }} -t ${{ env.GCR_REGISTRY }}/ephemera-celery-worker:latest ./api
        docker push ${{ env.GCR_REGISTRY }}/ephemera-celery-worker:${{ github.sha }}
        docker push ${{ env.GCR_REGISTRY }}/ephemera-celery-worker:latest

    - name: Build and push Celery Beat image
      run: |
        docker build -f api/Dockerfile -t ${{ env.GCR_REGISTRY }}/ephemera-celery-beat:${{ github.sha }} -t ${{ env.GCR_REGISTRY }}/ephemera-celery-beat:latest ./api
        docker push ${{ env.GCR_REGISTRY }}/ephemera-celery-beat:${{ github.sha }}
        docker push ${{ env.GCR_REGISTRY }}/ephemera-celery-beat:latest

    - name: Apply Kubernetes manifests
      run: |
        kubectl apply -f infrastructure/k8s/ephemera/namespace.yaml
        kubectl apply -f infrastructure/k8s/ephemera/configmap.yaml

        # Create secret from GitHub secrets if it doesn't exist
        kubectl get secret ephemera-secrets -n ephemera-system || \
        kubectl create secret generic ephemera-secrets -n ephemera-system \
          --from-literal=DATABASE_URL="${{ secrets.DATABASE_URL }}" \
          --from-literal=REDIS_URL="${{ secrets.REDIS_URL }}" \
          --from-literal=CELERY_BROKER_URL="${{ secrets.REDIS_URL }}" \
          --from-literal=CELERY_RESULT_BACKEND="${{ secrets.REDIS_URL }}" \
          --from-literal=GITHUB_APP_ID="${{ secrets.APP_ID }}" \
          --from-literal=GITHUB_APP_CLIENTID="${{ secrets.APP_CLIENT_ID }}" \
          --from-literal=GITHUB_WEBHOOK_SECRET="${{ secrets.WEBHOOK_SECRET }}" \
          --from-literal=GITHUB_APP_PRIVATE_KEY="${{ secrets.APP_PRIVATE_KEY }}" \
          --from-literal=SECRET_KEY="${{ secrets.SECRET_KEY }}"

        # Apply Let's Encrypt ClusterIssuer (generate from template with email)
        export LETSENCRYPT_EMAIL="${{ secrets.LETSENCRYPT_EMAIL }}"
        envsubst < infrastructure/k8s/letsencrypt-issuer.yaml.template | kubectl apply -f -

        kubectl apply -f infrastructure/k8s/ephemera/api-deployment.yaml
        kubectl apply -f infrastructure/k8s/ephemera/celery-worker-deployment.yaml
        kubectl apply -f infrastructure/k8s/ephemera/celery-beat-deployment.yaml
        kubectl apply -f infrastructure/k8s/ephemera/api-service.yaml
        kubectl apply -f infrastructure/k8s/ephemera/api-ingress.yaml

    - name: Update deployment images
      run: |
        kubectl set image deployment/ephemera-api api=${{ env.GCR_REGISTRY }}/ephemera-api:${{ github.sha }} -n ephemera-system
        kubectl set image deployment/ephemera-celery-worker celery-worker=${{ env.GCR_REGISTRY }}/ephemera-celery-worker:${{ github.sha }} -n ephemera-system
        kubectl set image deployment/ephemera-celery-beat celery-beat=${{ env.GCR_REGISTRY }}/ephemera-celery-beat:${{ github.sha }} -n ephemera-system

    - name: Wait for rollout to complete
      run: |
        kubectl rollout status deployment/ephemera-api -n ephemera-system --timeout=5m
        kubectl rollout status deployment/ephemera-celery-worker -n ephemera-system --timeout=5m
        kubectl rollout status deployment/ephemera-celery-beat -n ephemera-system --timeout=5m

    - name: Run database migrations
      run: |
        kubectl exec -n ephemera-system deployment/ephemera-api -- alembic upgrade head

    - name: Verify deployment
      run: |
        kubectl get pods -n ephemera-system
        kubectl get ingress -n ephemera-system
        echo "Deployment complete! API should be accessible at https://ephemera-api.devpreview.app"
